{"version":3,"sources":["src/index.js"],"names":["window","onload","canvas","document","querySelector","context","getContext","fillStyle","fillRect","strokeStyle","strokeRect","lineWidth","beginPath","moveTo","lineTo","fill","y","stroke","arc","Math","PI","scale","height","translate","font","fillText","kitten","Image","src","addEventListener","drawImage","kitten2","createElement","e","playerSprite","spriteWidth","spriteHeight","updatePlayer","frame","setInterval","clearRect","gatito","angulo","rad","updateGatito","requestAnimationFrame"],"mappings":"AAAAA,MAAM,CAACC,MAAP,GAAgB,YAAU;AACtB,MAAMC,MAAM,GAAIC,QAAQ,CAACC,aAAT,CAAuB,WAAvB,CAAhB;AACA,MAAMC,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAhB,CAFsB,CAItB;AACA;AAEA;AACA;AACA;;AACAD,EAAAA,OAAO,CAACE,SAAR,GAAoB,KAApB;AACAF,EAAAA,OAAO,CAACG,QAAR,CAAiB,EAAjB,EAAqB,CAArB,EAAwB,EAAxB,EAA4B,EAA5B,EAXsB,CAatB;AACA;AAEA;AACA;AACA;AACA;;AACAH,EAAAA,OAAO,CAACI,WAAR,GAAsB,MAAtB;AACAJ,EAAAA,OAAO,CAACK,UAAR,CAAmB,EAAnB,EAAsB,GAAtB,EAA0B,EAA1B,EAA6B,EAA7B,EArBsB,CAqBa;;AACnCL,EAAAA,OAAO,CAACM,SAAR,GAAoB,CAApB,CAtBsB,CAwBtB;AACA;AACA;AACA;AAEA;;AACAN,EAAAA,OAAO,CAACO,SAAR,GA9BsB,CA+BtB;;AACAP,EAAAA,OAAO,CAACQ,MAAR,CAAe,EAAf,EAAmB,EAAnB,EAhCsB,CAiCtB;AACA;;AACAR,EAAAA,OAAO,CAACS,MAAR,CAAe,EAAf,EAAmB,EAAnB,EAnCsB,CAoCtB;AACA;;AACAT,EAAAA,OAAO,CAACS,MAAR,CAAe,EAAf,EAAmB,EAAnB,EAtCsB,CAuCtB;;AACAT,EAAAA,OAAO,CAACU,IAAR,GAxCsB,CA0CtB;AACA;AAEA;;AACAV,EAAAA,OAAO,CAACO,SAAR,GA9CsB,CA+CtB;;AACA,OAAI,IAAII,CAAC,GAAC,EAAV,EAAcA,CAAC,GAAG,GAAlB,EAAuBA,CAAC,IAAI,EAA5B,EAA+B;AAC3B;AACA;AACAX,IAAAA,OAAO,CAACQ,MAAR,CAAe,GAAf,EAAoBG,CAApB;AACAX,IAAAA,OAAO,CAACS,MAAR,CAAe,GAAf,EAAoBE,CAApB;AACH;;AACDX,EAAAA,OAAO,CAACY,MAAR,GAtDsB,CAsDJ;AAElB;AACA;;AAEAZ,EAAAA,OAAO,CAACO,SAAR,GA3DsB,CA4DtB;AACA;AACA;;AACAP,EAAAA,OAAO,CAACa,GAAR,CAAY,GAAZ,EAAgB,GAAhB,EAAqB,EAArB,EAAyB,CAAzB,EAA4B,IAAIC,IAAI,CAACC,EAArC,EA/DsB,CAgEtB;;AACAf,EAAAA,OAAO,CAACY,MAAR;AAEAZ,EAAAA,OAAO,CAACO,SAAR,GAnEsB,CAoEtB;AACA;AACA;;AACAP,EAAAA,OAAO,CAACa,GAAR,CAAY,GAAZ,EAAgB,GAAhB,EAAqB,EAArB,EAAyB,CAAzB,EAA4B,MAAMC,IAAI,CAACC,EAAvC,EAvEsB,CAuEsB;AAC5C;;AACAf,EAAAA,OAAO,CAACI,WAAR,GAAsB,KAAtB;AACAJ,EAAAA,OAAO,CAACY,MAAR,GA1EsB,CA4EtB;AACA;AAEA;AACA;AACA;;AACAZ,EAAAA,OAAO,CAACgB,KAAR,CAAc,GAAd,EAAmB,GAAnB,EAlFsB,CAoFtB;;AACAhB,EAAAA,OAAO,CAACG,QAAR,CAAiB,GAAjB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4BN,MAAM,CAACoB,MAAnC,EArFsB,CAqFsB;AAC5C;AAEA;AACA;;AACAjB,EAAAA,OAAO,CAACkB,SAAR,CAAkB,EAAlB,EAAsB,CAAtB,EA1FsB,CA0FI;AAE1B;AAEA;AAEA;AACA;;AAEAlB,EAAAA,OAAO,CAACmB,IAAR,GAAe,YAAf;AACAnB,EAAAA,OAAO,CAACE,SAAR,GAAoB,MAApB;AACAF,EAAAA,OAAO,CAACoB,QAAR,CAAiB,OAAjB,EAA0B,GAA1B,EAA+B,EAA/B,EArGsB,CAqGc;AAEpC;AACA;AAEA;AACA;;AACA,MAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAU,GAAV,EAAe,GAAf,CAAf;AACAD,EAAAA,MAAM,CAACE,GAAP,GAAa,4BAAb,CA7GsB,CA8GtB;;AACAF,EAAAA,MAAM,CAACG,gBAAP,CAAwB,MAAxB,EAAgC,YAAK;AACjC;AACAxB,IAAAA,OAAO,CAACyB,SAAR,CAAkBJ,MAAlB,EAA0B,EAA1B,EAA8B,GAA9B,EAFiC,CAEG;AACvC,GAHD,EA/GsB,CAoHtB;AACA;AAEA;AACA;;AACA,MAAMK,OAAO,GAAG5B,QAAQ,CAAC6B,aAAT,CAAuB,KAAvB,CAAhB;AACAD,EAAAA,OAAO,CAACH,GAAR,GAAc,4BAAd,CA1HsB,CA2HtB;;AACAG,EAAAA,OAAO,CAACF,gBAAR,CAAyB,MAAzB,EAAiC,UAAAI,CAAC,EAAG;AACjC;AACA5B,IAAAA,OAAO,CAACyB,SAAR,CAAkBC,OAAlB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,GAArC,EAA0C,GAA1C,EAFiC,CAEe;AAEhD;AACA;AACH,GAND,EA5HsB,CAoItB;AACA;;AAEA,MAAMG,YAAY,GAAG,IAAIP,KAAJ,CAAU,EAAV,EAAc,EAAd,CAArB,CAvIsB,CAuIkB;;AACxCO,EAAAA,YAAY,CAACN,GAAb,GAAmB,4BAAnB;AACA,MAAMO,WAAW,GAAG,EAApB;AAAA,MAAwBC,YAAY,GAAG,EAAvC;AACAF,EAAAA,YAAY,CAACL,gBAAb,CAA8B,MAA9B,EAAsCQ,YAAtC;;AAEA,WAASA,YAAT,GAAuB;AACnB,QAAIC,KAAK,GAAG,CAAZ;AACAC,IAAAA,WAAW,CAAC,YAAM;AACd;AACAlC,MAAAA,OAAO,CAACmC,SAAR,CAAkB,GAAlB,EAAuB,EAAvB,EAA2BL,WAA3B,EAAwCC,YAAxC,EAFc,CAGd;;AACA/B,MAAAA,OAAO,CAACyB,SAAR,CAAkBI,YAAlB,EACkB;AACA;AACA;AACA;AACAI,MAAAA,KAAK,GAACH,WALxB,EAKqC,CALrC,EAKwCA,WALxC,EAKqDC,YALrD,EAMkB;AACA;AACA,SARlB,EAQuB,EARvB,EAQ2BD,WAR3B,EAQwCC,YARxC,EAJc,CAcd;AACA;AACA;AACA;AACA;;AACAE,MAAAA,KAAK,GAAG,CAACA,KAAK,GAAG,CAAT,IAAc,CAAtB;AACH,KApBU,EAoBR,EApBQ,CAAX,CAFmB,CAsBX;AACX,GAnKqB,CAqKtB;AACA;;;AAEA,MAAMG,MAAM,GAAG,IAAId,KAAJ,CAAU,GAAV,EAAe,GAAf,CAAf,CAxKsB,CAyKtB;;AACAc,EAAAA,MAAM,CAACb,GAAP,GAAa,4BAAb;AACAa,EAAAA,MAAM,CAACZ,gBAAP,CAAwB,MAAxB,EAAgC,YAAU;AACtCxB,IAAAA,OAAO,CAACyB,SAAR,CAAkBW,MAAlB,EAA0B,GAA1B,EAA+B,EAA/B,EAAmC,GAAnC,EAAwC,GAAxC,EADsC,CAEtC;AACH,GAHD;AAKA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAMC,GAAG,GAAGxB,IAAI,CAACC,EAAL,GAAU,GAAtB;;AACA,WAASwB,YAAT,GAAuB;AACnBF,IAAAA,MAAM,IAAI,CAAV,CADmB,CAEnB;AACA;AACA;AAEA;AACA;;AACAG,IAAAA,qBAAqB,CAACD,YAAD,CAArB;AACH;;AAEDC,EAAAA,qBAAqB,CAACD,YAAD,CAArB;AACH,CA9LD","file":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["window.onload = function(){\n    const canvas  = document.querySelector('#myCanvas');\n    const context = canvas.getContext('2d');\n\n    //------------------------------------------------------------------------------\\\\\n    // CUADRADO con fondo\n\n    // - con fondo color rojo\n    // - width=25px, height=25px\n    // - posX = 10, posY = 0\n    context.fillStyle = 'red';\n    context.fillRect(10, 0, 25, 25);\n\n    //------------------------------------------------------------------------------\\\\\n    // CUADRADO con borde\n\n    // - sin fondo\n    // - width=50px, height=50px\n    // - posX = 10, posY = 50\n    // - borde azul de grosor 5px\n    context.strokeStyle = 'blue';\n    context.strokeRect(10,100,50,50);  // (posX, posY, width, height)\n    context.lineWidth = 5;\n\n    //------------------------------------------------------------------------------\\\\\n    // TRIANGULO\n    // - Partimos de (x=50, y=10) y haremos dos trazos en diagonal\n    // bajando unos 60px en ambos lados, y nos desplazamos 40px hacia los costados\n\n    // Empezamos el trazo\n    context.beginPath();\n    // empieza con la punta superior del triángulo (posX=50, posY=10)\n    context.moveTo(50, 10);\n    // hace un trazo 40px hacia la izq, y 60px hacia abajo\n    // partiendo de la posición (x=50,y=10)\n    context.lineTo(10, 70);\n    // hace un trazo 40px hacia la der.y 60px hacia abajo\n    // partiendo de la posición (x=50,y=10)\n    context.lineTo(90, 70);\n    // rellena la figura\n    context.fill();\n\n    //------------------------------------------------------------------------------\\\\\n    // RECTAS HORIZONTALES\n\n    // comenzamos el trazo\n    context.beginPath();\n    // - hará trazos con 10 px de grosor (por incrementar y += 10 en cada iteración)\n    for(let y=10; y < 100; y += 10){\n        // - cada iteración hará un trazo desde posX=100 hasta posX=200 (recta horizontal)\n        // - y aumentará 10 en el posY\n        context.moveTo(100, y);\n        context.lineTo(200, y);\n    }\n    context.stroke(); // finaliza el dibujo\n\n    //------------------------------------------------------------------------------\\\\\n    // CIRCUNFERENCIAS\n\n    context.beginPath();\n    // - posX=150, posY=150\n    // - radio = 50px <- 100px de diámetro\n    // - ángulo 0 a 2PI (360º la vuelta entera)\n    context.arc(150,150, 50, 0, 2 * Math.PI);\n    //context.fillStyle = 'green'; <-- NO FUNCIONA (???)\n    context.stroke();\n\n    context.beginPath();\n    // - posX=150, posY=150\n    // - radio = 50px <- 100px de diámetro\n    // - ángulo 0 a 1/2*PI (45º un cuarto de circunferencia)\n    context.arc(150,150, 50, 0, 0.5 * Math.PI); // (posX, posY, radio, anguloInicla, anguloFinal)\n    // - le damos color al borde\n    context.strokeStyle = 'red';\n    context.stroke();\n\n    //------------------------------------------------------------------------------\\\\\n    // TRANSFORMATION\n\n    // - redimensiona todos los elementos del CANVAS\n    // que estén debajo de esta sentencia\n    // - redimensiona el tamaño, quedando 80% de tamaño original de ancho y de alto\n    context.scale(0.8, 0.8);\n\n    // dibujamos una linea vertical\n    context.fillRect(380, 0, 1, canvas.height); // (posX, posY, lineWidth, lineHeight)\n    //context.save();\n\n    // - trasladamos todos los elementos a la posición (posX=10, posY=5)\n    // - mueve todo 10px hacia la derecha, y 5px hacia abajo\n    context.translate(10, 5); // (posX, posY)\n\n    //context.restore();\n\n    //context.rotate(Math.PI*2);\n\n    //------------------------------------------------------------------------------\\\\\n    // TEXTO\n\n    context.font = '45px Arial';\n    context.fillStyle = 'blue';\n    context.fillText('Hi..!', 210, 50); // (texto, posX, posY)\n\n    //------------------------------------------------------------------------------\\\\\n    // IMAGEN con new Image()\n\n    // 1. Creamos la instancia de la clase Image (crea un object de tipo imagen)\n    // (como si  usaramos la etiqueta <img> de html)\n    const kitten = new Image(100, 100);\n    kitten.src = '/assets/sprites/kitten.png';\n    // 2. Cuando se cargó el recurso => se dibuja en el canvas\n    kitten.addEventListener('load', () =>{\n        // 3. la agregamos al DOM\n        context.drawImage(kitten, 10, 180); // (imagen, posX, posY, width, height)\n    });\n\n    //------------------------------------------------------------------------------\\\\\n    // IMAGEN con createElement()\n\n    // Similar al anterior pero creamos un elemento en el DOM (una etiqueta)\n    // - La w3c recomienda esta manera\n    const kitten2 = document.createElement('img');\n    kitten2.src = '/assets/sprites/kitten.png';\n    // 2. Cuando se cargó el recurso => se dibuja en el canvas\n    kitten2.addEventListener('load', e =>{\n        // 3. Dibujamos la imagen dentro del canvas\n        context.drawImage(kitten2, 150, 180, 100, 100); // (imagen, posX, posY, width, height)\n\n        // - si NO le pasamos el width/height => dibujará el tamaño original de la imagen\n        //context.drawImage(kitten, 10, 180); // (imagen, posX, posY, width, height)\n    });\n\n    //------------------------------------------------------------------------------\\\\\n    // ANIMACIONES con setInterval()\n\n    const playerSprite = new Image(48, 32); // width=24px, height=32px\n    playerSprite.src = '/assets/sprites/player.png';\n    const spriteWidth = 48, spriteHeight = 90;\n    playerSprite.addEventListener('load', updatePlayer);\n\n    function updatePlayer(){\n        let frame = 0;\n        setInterval(() => {\n            // clearRect, borrará el frame anterior\n            context.clearRect(400, 50, spriteWidth, spriteHeight);\n            // dibujamos el sprite en cada iteración\n            context.drawImage(playerSprite,\n                              // recortamos un rectángulo del spriteSheet\n                              // - comienza en (x=48, y=0)\n                              // - por cada iteración hace x=48, 48*2, 48*3, 48*4,...\n                              // - nos desplazamos 48px hacia la derecha\n                              frame*spriteWidth, 0, spriteWidth, spriteHeight,\n                              // destino del rectángulo dentro del canvas\n                              // - estará en (x=400, y=50)\n                              400, 50, spriteWidth, spriteHeight);\n\n            // - Sumamos 1 para avanzar la posición del frame\n            // - Hacemos módulo 8, porque queremos que los números estén entre 0 y 7\n            //\n            // Ej. 0%8=0, 1%8=1, .., 6%8=6, 7%8=7, 8%8%=0, 9%8=1, 10%8=2, ..\n            // cuando supera el valor 7 vuelve al 0, y asi...\n            frame = (frame + 1) % 8;\n        }, 90); // 120ms (milisegundos)\n    }\n\n    //------------------------------------------------------------------------------\\\\\n    // ANIMACIONES con requestAnimationFrame()\n\n    const gatito = new Image(100, 100);\n    // let angulo = Math.PI / 2;\n    gatito.src = '/assets/sprites/kitten.png';\n    gatito.addEventListener('load', function(){\n        context.drawImage(gatito, 500, 50, 100, 100);\n        //updateGatito();\n    });\n\n    let angulo = 5;\n    const rad = Math.PI * 180;\n    function updateGatito(){\n        angulo += 1;\n        // context.strokeRect(500,200,150,150);\n        // context.rotate(rad*angulo);\n        // context.fillRect(500,200, 100, 100);\n\n        // gatito.style.top = (Math.sin(angulo)*20) + 'px';\n        // gatito.style.left = (Math.sin(angulo)*200) + 'px';\n        requestAnimationFrame(updateGatito);\n    }\n\n    requestAnimationFrame(updateGatito);\n}\n"]}